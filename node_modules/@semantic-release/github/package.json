{
  "_args": [
    [
      "@semantic-release/github@^5.1.0",
      "/home/node_modules/semantic-release"
    ]
  ],
  "_from": "@semantic-release/github@>=5.1.0 <6.0.0",
  "_hasShrinkwrap": false,
  "_id": "@semantic-release/github@5.4.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/@semantic-release/github",
  "_nodeVersion": "10.16.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/github_5.4.3_1563569257495_0.5720874229046586"
  },
  "_npmUser": {
    "email": "semantic-release@boennemann.me",
    "name": "semantic-release-bot"
  },
  "_npmVersion": "6.10.1",
  "_phantomChildren": {},
  "_requested": {
    "name": "@semantic-release/github",
    "raw": "@semantic-release/github@^5.1.0",
    "rawSpec": "^5.1.0",
    "scope": "@semantic-release",
    "spec": ">=5.1.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/semantic-release"
  ],
  "_resolved": "https://registry.npmjs.org/@semantic-release/github/-/github-5.4.3.tgz",
  "_shasum": "7c7fe716d0fa757d2d4a4075e5e7e1ff5d0f8942",
  "_shrinkwrap": null,
  "_spec": "@semantic-release/github@^5.1.0",
  "_where": "/home/node_modules/semantic-release",
  "author": {
    "name": "Pierre Vanduynslager",
    "url": "https://twitter.com/@pvdlg_"
  },
  "ava": {
    "helpers": [
      "test/helpers/**/*"
    ]
  },
  "bugs": {
    "url": "https://github.com/semantic-release/github/issues"
  },
  "config": {
    "commitizen": {
      "path": "cz-conventional-changelog"
    }
  },
  "contributors": [
    {
      "name": "Stephan BÃ¶nnemann",
      "email": "stephan@boennemann.me",
      "url": "http://boennemann.me"
    },
    {
      "name": "Gregor Martynus",
      "url": "https://twitter.com/gr2m"
    }
  ],
  "dependencies": {
    "@octokit/rest": "^16.27.0",
    "@semantic-release/error": "^2.2.0",
    "aggregate-error": "^3.0.0",
    "bottleneck": "^2.18.1",
    "debug": "^4.0.0",
    "dir-glob": "^3.0.0",
    "fs-extra": "^8.0.0",
    "globby": "^10.0.0",
    "http-proxy-agent": "^2.1.0",
    "https-proxy-agent": "^2.2.1",
    "issue-parser": "^4.0.0",
    "lodash": "^4.17.4",
    "mime": "^2.4.3",
    "p-filter": "^2.0.0",
    "p-retry": "^4.0.0",
    "parse-github-url": "^1.0.1",
    "url-join": "^4.0.0"
  },
  "description": "semantic-release plugin to publish a GitHub release and comment on released Pull Requests/Issues",
  "devDependencies": {
    "ava": "^2.0.0",
    "clear-module": "^4.0.0",
    "codecov": "^3.5.0",
    "commitizen": "^3.0.0",
    "cz-conventional-changelog": "^2.0.0",
    "nock": "^10.0.0",
    "nyc": "^14.1.1",
    "proxy": "^0.2.4",
    "proxyquire": "^2.0.0",
    "semantic-release": "^15.13.12",
    "server-destroy": "^1.0.1",
    "sinon": "^7.1.1",
    "tempy": "^0.3.0",
    "xo": "^0.24.0"
  },
  "directories": {},
  "dist": {
    "fileCount": 19,
    "integrity": "sha512-nFoG1whDZettsGsMRE64kCFRpGSHxQxiKtUltKw67uYO7Q62049HGcdH7pZh/ipn+Uq2cG4Zef/g1vxVVaK82w==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdMixqCRA9TVsSAnZWagAA+EMP/iCABeTDYaSbZw6ZClVH\nS5FtgaLR2r7i/Bh6C/lXmr9sKo93fobfaZsvrHTB8IJTn+cg8LnGMyxp/C5U\no6jdFq8JSEl8w2SNKug3qbBq82EVU3qjn4xTnPybplvEnWafRqhcYIzHwW/u\n4cXMrJ9clZRqDW4aBLv9xv+c1LC0U1/TkVD6FLbxvvRkp4LcCiWuB/gd/SyG\nV+rp0VDQ1F/sEgcHZ1V8/CPl/X0rZ8qnt876edGtlLQqB4cjNdvBK7Wg3tDQ\nBfAd1L68dUmzIbWwaCmiQl8N4IflpKlmQ8ku2QmyrN6AqAdGyhSgp8q2o7SL\nwloxP8GOm5bUoa64cYuPDxK8BSeNLbCuyQbFxBcOt/wN7mrvXnXdT8qw/9Gp\n6EOKXqDPXTuuOTRc791wdZ484f99Hke2H12tGaFWDiXGQcz4PTQlp/ZW3kFF\nr/xQfqPWbvzy3E72rM2/iTXlEgXSlewSUgim6N1WwE1E0wlILlmipwYxC8go\nLAylzRb9inpP0N3CfbLN68zFt71z6IDDt33hONLHHID+EDvFuDMRIcy2YEx9\nF9U37yGF0qqPLTk0QaCq+YZSrXe4y6+7veM8+TxEEmBRQHPSa3/z5IxLkbsL\nBK9UcTqC9lC5eTxgZnZymCr4KxQJ/YGJLPCw6KCxOUTJRHr3ifL0KAEiyzgI\n52pG\r\n=8f8V\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "7c7fe716d0fa757d2d4a4075e5e7e1ff5d0f8942",
    "tarball": "https://registry.npmjs.org/@semantic-release/github/-/github-5.4.3.tgz",
    "unpackedSize": 54579
  },
  "engines": {
    "node": ">=8.3"
  },
  "gitHead": "7e66a99cc9e3aeb80c7457699ae5503f57da02c7",
  "homepage": "https://github.com/semantic-release/github#readme",
  "keywords": [
    "git",
    "github",
    "issue",
    "notifications",
    "publish",
    "pull-request",
    "release",
    "semantic-release",
    "version"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "boennemann",
      "email": "stephan@boennemann.me"
    },
    {
      "name": "christophwitzko",
      "email": "npm@christophwitzko.com"
    },
    {
      "name": "gr2m",
      "email": "gregor@martynus.net"
    },
    {
      "name": "pvdlg",
      "email": "pierre.denis.vanduynslager@gmail.com"
    },
    {
      "name": "semantic-release-bot",
      "email": "semantic-release@boennemann.me"
    }
  ],
  "name": "@semantic-release/github",
  "nyc": {
    "all": true,
    "include": [
      "index.js",
      "lib/**/*.js"
    ],
    "reporter": [
      "html",
      "json",
      "text"
    ]
  },
  "optionalDependencies": {},
  "peerDependencies": {
    "semantic-release": ">=15.8.0 <16.0.0"
  },
  "prettier": {
    "printWidth": 120,
    "trailingComma": "es5"
  },
  "publishConfig": {
    "access": "public",
    "tag": "next"
  },
  "readme": "# @semantic-release/github\n\n[**semantic-release**](https://github.com/semantic-release/semantic-release) plugin to publish a\n[GitHub release](https://help.github.com/articles/about-releases) and comment on released Pull Requests/Issues.\n\n[![Travis](https://img.shields.io/travis/semantic-release/github.svg)](https://travis-ci.org/semantic-release/github)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/github.svg)](https://codecov.io/gh/semantic-release/github)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/github.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/github/latest.svg)](https://www.npmjs.com/package/@semantic-release/github)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/github/next.svg)](https://www.npmjs.com/package/@semantic-release/github)\n\n| Step               | Description                                                                                                                                                                                                                              |\n|--------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `verifyConditions` | Verify the presence and the validity of the authentication (set via [environment variables](#environment-variables)) and the [assets](#assets) option configuration.                                                                     |\n| `publish`          | Publish a [GitHub release](https://help.github.com/articles/about-releases), optionally uploading file assets.                                                                                                                           |\n| `success`          | Add a comment to each [GitHub Issue](https://help.github.com/articles/about-issues) or [Pull Request](https://help.github.com/articles/about-pull-requests) resolved by the release and close issues previously open by the `fail` step. |\n| `fail`             | Open or update a [GitHub Issue](https://help.github.com/articles/about-issues) with information about the errors that caused the release to fail.                                                                                       |\n\n## Install\n\n```bash\n$ npm install @semantic-release/github -D\n```\n\n## Usage\n\nThe plugin can be configured in the [**semantic-release** configuration file](https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#configuration):\n\n```json\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\"@semantic-release/github\", {\n      \"assets\": [\n        {\"path\": \"dist/asset.min.css\", \"label\": \"CSS distribution\"},\n        {\"path\": \"dist/asset.min.js\", \"label\": \"JS distribution\"}\n      ]\n    }],\n  ]\n}\n```\n\nWith this example [GitHub releases](https://help.github.com/articles/about-releases) will be published with the file `dist/asset.min.css` and `dist/asset.min.js`.\n\n## Configuration\n\n### GitHub authentication\n\nThe GitHub authentication configuration is **required** and can be set via [environment variables](#environment-variables).\n\nFollow the [Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line) documentation to obtain an authentication token. The token has to be made available in your CI environment via the `GH_TOKEN` environment variable. The user associated with the token must have push permission to the repository.\n\nWhen creating the token, the **minimum required scopes** are:\n\n- [`repo`](https://github.com/settings/tokens/new?scopes=repo) for a private repository\n- [`public_repo`](https://github.com/settings/tokens/new?scopes=public_repo) for a public repository\n\n### Environment variables\n\n| Variable                       | Description                                               |\n| ------------------------------ | --------------------------------------------------------- |\n| `GH_TOKEN` or `GITHUB_TOKEN`   | **Required.** The token used to authenticate with GitHub. |\n| `GH_URL` or `GITHUB_URL`       | The GitHub Enterprise endpoint.                           |\n| `GH_PREFIX` or `GITHUB_PREFIX` | The GitHub Enterprise API prefix.                         |\n\n### Options\n\n| Option                | Description                                                                                                                                                                         | Default                                                                                                                                              |\n|-----------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `githubUrl`           | The GitHub Enterprise endpoint.                                                                                                                                                     | `GH_URL` or `GITHUB_URL` environment variable.                                                                                                       |\n| `githubApiPathPrefix` | The GitHub Enterprise API prefix.                                                                                                                                                   | `GH_PREFIX` or `GITHUB_PREFIX` environment variable.                                                                                                 |\n| `proxy`               | The proxy to use to access the GitHub API. See [proxy](#proxy).                                                                                                                     | `HTTP_PROXY` environment variable.                                                                                                                   |\n| `assets`              | An array of files to upload to the release. See [assets](#assets).                                                                                                                  | -                                                                                                                                                    |\n| `successComment`      | The comment to add to each issue and pull request resolved by the release. Set to `false` to disable commenting on issues and pull requests. See [successComment](#successcomment). | `:tada: This issue has been resolved in version ${nextRelease.version} :tada:\\n\\nThe release is available on [GitHub release](<github_release_url>)` |\n| `failComment`         | The content of the issue created when a release fails. Set to `false` to disable opening an issue when a release fails. See [failComment](#failcomment).                            | Friendly message with links to **semantic-release** documentation and support, with the list of errors that caused the release to fail.              |\n| `failTitle`           | The title of the issue created when a release fails. Set to `false` to disable opening an issue when a release fails.                                                               | `The automated release is failing ð¨`                                                                                                                |\n| `labels`              | The [labels](https://help.github.com/articles/about-labels) to add to the issue created when a release fails. Set to `false` to not add any label.                                  | `['semantic-release']`                                                                                                                               |\n| `assignees`           | The [assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users) to add to the issue created when a release fails.                        | -                                                                                                                                                    |\n| `releasedLabels`      | The [labels](https://help.github.com/articles/about-labels) to add to each issue and pull request resolved by the release. Set to `false` to not add any label.                     | `['released']`                                                                                                                                       |\n\n#### proxy\n\nCan be a the proxy URL or and `Object` with the following properties:\n\n| Property      | Description                                                    | Default                              |\n|---------------|----------------------------------------------------------------|--------------------------------------|\n| `host`        | **Required.** Proxy host to connect to.                        | -                                    |\n| `port`        | **Required.** Proxy port to connect to.                        | File name extracted from the `path`. |\n| `secureProxy` | If `true`, then use TLS to connect to the proxy.               | `false`                              |\n| `headers`     | Additional HTTP headers to be sent on the HTTP CONNECT method. | -                                    |\n\nSee [node-https-proxy-agent](https://github.com/TooTallNate/node-https-proxy-agent#new-httpsproxyagentobject-options) and [node-http-proxy-agent](https://github.com/TooTallNate/node-http-proxy-agent) for additional details.\n\n##### proxy examples\n\n`'http://168.63.76.32:3128'`: use the proxy running on host `168.63.76.32` and port `3128` for each GitHub API request.\n`{host: '168.63.76.32', port: 3128, headers: {Foo: 'bar'}}`: use the proxy running on host `168.63.76.32` and port `3128` for each GitHub API request, setting the `Foo` header value to `bar`.\n\n#### assets\n\nCan be a [glob](https://github.com/isaacs/node-glob#glob-primer) or and `Array` of\n[globs](https://github.com/isaacs/node-glob#glob-primer) and `Object`s with the following properties:\n\n| Property | Description                                                                                              | Default                              |\n| -------- | -------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n| `path`   | **Required.** A [glob](https://github.com/isaacs/node-glob#glob-primer) to identify the files to upload. | -                                    |\n| `name`   | The name of the downloadable file on the GitHub release.                                                 | File name extracted from the `path`. |\n| `label`  | Short description of the file displayed on the GitHub release.                                           | -                                    |\n\nEach entry in the `assets` `Array` is globbed individually. A [glob](https://github.com/isaacs/node-glob#glob-primer)\ncan be a `String` (`\"dist/**/*.js\"` or `\"dist/mylib.js\"`) or an `Array` of `String`s that will be globbed together\n(`[\"dist/**\", \"!**/*.css\"]`).\n\nIf a directory is configured, all the files under this directory and its children will be included.\n\n**Note**: If a file has a match in `assets` it will be included even if it also has a match in `.gitignore`.\n\n##### assets examples\n\n`'dist/*.js'`: include all the `js` files in the `dist` directory, but not in its sub-directories.\n\n`[['dist', '!**/*.css']]`: include all the files in the `dist` directory and its sub-directories excluding the `css`\nfiles.\n\n`[{path: 'dist/MyLibrary.js', label: 'MyLibrary JS distribution'}, {path: 'dist/MyLibrary.css', label: 'MyLibrary CSS\ndistribution'}]`: include the `dist/MyLibrary.js` and `dist/MyLibrary.css` files, and label them `MyLibrary JS\ndistribution` and `MyLibrary CSS distribution` in the GitHub release.\n\n`[['dist/**/*.{js,css}', '!**/*.min.*'], {path: 'build/MyLibrary.zip', label: 'MyLibrary'}]`: include all the `js` and\n`css` files in the `dist` directory and its sub-directories excluding the minified version, plus the\n`build/MyLibrary.zip` file and label it `MyLibrary` in the GitHub release.\n\n#### successComment\n\nThe message for the issue comments is generated with [Lodash template](https://lodash.com/docs#template). The following variables are available:\n\n| Parameter     | Description                                                                                                                                                                                                                                                                   |\n|---------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `branch`      | The branch from which the release is done.                                                                                                                                                                                                                                    |\n| `lastRelease` | `Object` with `version`, `gitTag` and `gitHead` of the last release.                                                                                                                                                                                                          |\n| `nextRelease` | `Object` with `version`, `gitTag`, `gitHead` and `notes` of the release being done.                                                                                                                                                                                           |\n| `commits`     | `Array` of commit `Object`s with `hash`, `subject`, `body` `message` and `author`.                                                                                                                                                                                            |\n| `releases`    | `Array` with a release `Object`s for each release published, with optional release data such as `name` and `url`.                                                                                                                                                             |\n| `issue`       | A [GitHub API pull request object](https://developer.github.com/v3/search/#search-issues) for pull requests related to a commit, or an `Object` with the `number` property for issues resolved via [keywords](https://help.github.com/articles/closing-issues-using-keywords) |\n\n##### successComment examples\n\nThe `successComment` `This ${issue.pull_request ? 'pull request' : 'issue'} is included in version ${nextRelease.version}` will generate the comment:\n\n> This pull request is included in version 1.0.0\n\n#### failComment\n\nThe message for the issue content is generated with [Lodash template](https://lodash.com/docs#template). The following variables are available:\n\n| Parameter | Description                                                                                                                                                                                                                                                                                                             |\n|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `branch`  | The branch from which the release had failed.                                                                                                                                                                                                                                                                           |\n| `errors`  | An `Array` of [SemanticReleaseError](https://github.com/semantic-release/error). Each error has the `message`, `code`, `pluginName` and `details` properties.<br>`pluginName` contains the package name of the plugin that threw the error.<br>`details` contains a information about the error formatted in markdown. |\n\n##### failComment examples\n\nThe `failComment` `This release from branch ${branch} had failed due to the following errors:\\n- ${errors.map(err => err.message).join('\\\\n- ')}` will generate the comment:\n\n> This release from branch master had failed due to the following errors:\n> - Error message 1\n> - Error message 2\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/semantic-release/github.git"
  },
  "scripts": {
    "cm": "git-cz",
    "codecov": "codecov -f coverage/coverage-final.json",
    "lint": "xo",
    "pretest": "npm run lint",
    "semantic-release": "semantic-release",
    "test": "nyc ava -v"
  },
  "version": "5.4.3",
  "xo": {
    "prettier": true,
    "rules": {
      "camelcase": [
        {
          "allow": [
            "issue_number",
            "pull_number"
          ]
        },
        "error"
      ]
    },
    "space": true
  }
}
